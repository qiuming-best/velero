// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
)

// UploaderProvider is an autogenerated mock type for the UploaderProvider type
type UploaderProvider struct {
	mock.Mock
}

// Cancel provides a mock function with given fields:
func (_m *UploaderProvider) Cancel() {
	_m.Called()
}

// Close provides a mock function with given fields:
func (_m *UploaderProvider) Close() {
	_m.Called()
}

// GetSnapshotID provides a mock function with given fields:
func (_m *UploaderProvider) GetSnapshotID() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskName provides a mock function with given fields:
func (_m *UploaderProvider) GetTaskName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RunBackup provides a mock function with given fields: ctx, path, tags, parentSnapshot, updateFunc
func (_m *UploaderProvider) RunBackup(ctx context.Context, path string, tags map[string]string, parentSnapshot string, updateFunc func(v1.PodVolumeOperationProgress)) (string, string, error) {
	ret := _m.Called(ctx, path, tags, parentSnapshot, updateFunc)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string, string, func(v1.PodVolumeOperationProgress)) string); ok {
		r0 = rf(ctx, path, tags, parentSnapshot, updateFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string, string, func(v1.PodVolumeOperationProgress)) string); ok {
		r1 = rf(ctx, path, tags, parentSnapshot, updateFunc)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string, string, func(v1.PodVolumeOperationProgress)) error); ok {
		r2 = rf(ctx, path, tags, parentSnapshot, updateFunc)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunRestore provides a mock function with given fields: ctx, snapshotID, volumePath, updateFunc
func (_m *UploaderProvider) RunRestore(ctx context.Context, snapshotID string, volumePath string, updateFunc func(v1.PodVolumeOperationProgress)) (string, string, error) {
	ret := _m.Called(ctx, snapshotID, volumePath, updateFunc)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, func(v1.PodVolumeOperationProgress)) string); ok {
		r0 = rf(ctx, snapshotID, volumePath, updateFunc)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, func(v1.PodVolumeOperationProgress)) string); ok {
		r1 = rf(ctx, snapshotID, volumePath, updateFunc)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, func(v1.PodVolumeOperationProgress)) error); ok {
		r2 = rf(ctx, snapshotID, volumePath, updateFunc)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

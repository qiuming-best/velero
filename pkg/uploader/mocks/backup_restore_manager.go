/*
Copyright the Velero contributors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.*/
// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
)

// BackupRestoreManager is an autogenerated mock type for the RepositoryManager type
type BackupRestoreManager struct {
	mock.Mock
}

// NewBackupper provides a mock function with given fields: _a0, _a1
func (_m *BackupRestoreManager) NewBackupper(_a0 context.Context, _a1 *v1.Backup) (uploader.Backupper, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uploader.Backupper
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Backup) uploader.Backupper); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uploader.Backupper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Backup) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRestorer provides a mock function with given fields: _a0, _a1
func (_m *BackupRestoreManager) NewRestorer(_a0 context.Context, _a1 *v1.Restore) (uploader.Restorer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 uploader.Restorer
	if rf, ok := ret.Get(0).(func(context.Context, *v1.Restore) uploader.Restorer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uploader.Restorer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *v1.Restore) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

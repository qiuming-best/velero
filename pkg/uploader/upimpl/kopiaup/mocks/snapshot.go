package mocks

import (
	"context"

	"github.com/kopia/kopia/repo/manifest"
	"github.com/kopia/kopia/snapshot"
	"github.com/stretchr/testify/mock"

	"github.com/kopia/kopia/repo"
)

// snapshot is an autogenerated mock type for the snapshot type
type Snapshot struct {
	mock.Mock
}

// LoadSnapshot provides a mock function with given fields: ctx, rep, manifestID
func (_m *Snapshot) LoadSnapshot(ctx context.Context, rep repo.Repository, manifestID manifest.ID) (*snapshot.Manifest, error) {
	ret := _m.Called(ctx, rep, manifestID)

	var r0 *snapshot.Manifest
	if rf, ok := ret.Get(0).(func(context.Context, repo.Repository, manifest.ID) *snapshot.Manifest); ok {
		r0 = rf(ctx, rep, manifestID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*snapshot.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.Repository, manifest.ID) error); ok {
		r1 = rf(ctx, rep, manifestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveSnapshot provides a mock function with given fields: ctx, rep, man
func (_m *Snapshot) SaveSnapshot(ctx context.Context, rep repo.RepositoryWriter, man *snapshot.Manifest) (manifest.ID, error) {
	ret := _m.Called(ctx, rep, man)

	var r0 manifest.ID
	if rf, ok := ret.Get(0).(func(context.Context, repo.RepositoryWriter, *snapshot.Manifest) manifest.ID); ok {
		r0 = rf(ctx, rep, man)
	} else {
		r0 = ret.Get(0).(manifest.ID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.RepositoryWriter, *snapshot.Manifest) error); ok {
		r1 = rf(ctx, rep, man)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

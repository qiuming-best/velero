// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	"context"

	"github.com/kopia/kopia/snapshot/policy"
	"github.com/stretchr/testify/mock"

	"github.com/kopia/kopia/repo"

	"github.com/kopia/kopia/snapshot"
)

// policy is an autogenerated mock type for the TreeForSource type
type Policy struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, rep, si
func (_m *Policy) TreeForSource(ctx context.Context, rep repo.Repository, si snapshot.SourceInfo) (*policy.Tree, error) {
	ret := _m.Called(ctx, rep, si)

	var r0 *policy.Tree
	if rf, ok := ret.Get(0).(func(context.Context, repo.Repository, snapshot.SourceInfo) *policy.Tree); ok {
		r0 = rf(ctx, rep, si)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*policy.Tree)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.Repository, snapshot.SourceInfo) error); ok {
		r1 = rf(ctx, rep, si)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyRetentionPolicy provides a mock function with given fields: ctx, rep, sourceInfo, reallyDelete
func (_m *Policy) ApplyRetentionPolicy(ctx context.Context, rep repo.RepositoryWriter, sourceInfo snapshot.SourceInfo, reallyDelete bool) ([]*snapshot.Manifest, error) {
	ret := _m.Called(ctx, rep, sourceInfo, reallyDelete)

	var r0 []*snapshot.Manifest
	if rf, ok := ret.Get(0).(func(context.Context, repo.RepositoryWriter, snapshot.SourceInfo, bool) []*snapshot.Manifest); ok {
		r0 = rf(ctx, rep, sourceInfo, reallyDelete)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*snapshot.Manifest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, repo.RepositoryWriter, snapshot.SourceInfo, bool) error); ok {
		r1 = rf(ctx, rep, sourceInfo, reallyDelete)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Policy) SetPolicy(ctx context.Context, rep repo.RepositoryWriter, si snapshot.SourceInfo, pol *policy.Policy) error {
	ret := _m.Called(ctx, rep, si, pol)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.RepositoryWriter, snapshot.SourceInfo, *policy.Policy) error); ok {
		r0 = rf(ctx, rep, si, pol)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
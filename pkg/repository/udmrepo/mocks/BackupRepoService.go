// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	udmrepo "github.com/vmware-tanzu/velero/pkg/repository/udmrepo"
)

// BackupRepoService is an autogenerated mock type for the BackupRepoService type
type BackupRepoService struct {
	mock.Mock
}

// InitBackupRepo provides a mock function with given fields: repoOption, outputConfigFile, createNew
func (_m *BackupRepoService) InitBackupRepo(repoOption udmrepo.RepoOptions, outputConfigFile string, createNew bool) error {
	ret := _m.Called(repoOption, outputConfigFile, createNew)

	var r0 error
	if rf, ok := ret.Get(0).(func(udmrepo.RepoOptions, string, bool) error); ok {
		r0 = rf(repoOption, outputConfigFile, createNew)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MaintainBackupRepo provides a mock function with given fields: configFile, password, full
func (_m *BackupRepoService) MaintainBackupRepo(configFile string, password string, full bool) error {
	ret := _m.Called(configFile, password, full)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, bool) error); ok {
		r0 = rf(configFile, password, full)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenBackupRepo provides a mock function with given fields: configFile, password
func (_m *BackupRepoService) OpenBackupRepo(configFile string, password string) (udmrepo.BackupRepo, error) {
	ret := _m.Called(configFile, password)

	var r0 udmrepo.BackupRepo
	if rf, ok := ret.Get(0).(func(string, string) udmrepo.BackupRepo); ok {
		r0 = rf(configFile, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(udmrepo.BackupRepo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(configFile, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

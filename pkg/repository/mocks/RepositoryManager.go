// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cache "k8s.io/client-go/tools/cache"

	mock "github.com/stretchr/testify/mock"

	v1 "github.com/vmware-tanzu/velero/pkg/apis/velero/v1"
)

// RepositoryManager is an autogenerated mock type for the RepositoryManager type
type RepositoryManager struct {
	mock.Mock
}

// ConnectToRepo provides a mock function with given fields: repo
func (_m *RepositoryManager) ConnectToRepo(repo *v1.ResticRepository) error {
	ret := _m.Called(repo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ResticRepository) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureRepo provides a mock function with given fields: ctx, namespace, volumeNamespace, backupLocation
func (_m *RepositoryManager) EnsureRepo(ctx context.Context, namespace string, volumeNamespace string, backupLocation string) (string, string, error) {
	ret := _m.Called(ctx, namespace, volumeNamespace, backupLocation)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, namespace, volumeNamespace, backupLocation)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) string); ok {
		r1 = rf(ctx, namespace, volumeNamespace, backupLocation)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, namespace, volumeNamespace, backupLocation)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// EnsureUnlockRepo provides a mock function with given fields: repo
func (_m *RepositoryManager) EnsureUnlockRepo(repo *v1.ResticRepository) error {
	ret := _m.Called(repo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ResticRepository) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Forget provides a mock function with given fields: ctx, snapshotID, volumeNamespace, backupLocation
func (_m *RepositoryManager) Forget(ctx context.Context, snapshotID string, volumeNamespace string, backupLocation string) error {
	ret := _m.Called(ctx, snapshotID, volumeNamespace, backupLocation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, snapshotID, volumeNamespace, backupLocation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRepoInformerSynced provides a mock function with given fields:
func (_m *RepositoryManager) GetRepoInformerSynced() cache.InformerSynced {
	ret := _m.Called()

	var r0 cache.InformerSynced
	if rf, ok := ret.Get(0).(func() cache.InformerSynced); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cache.InformerSynced)
		}
	}

	return r0
}

// InitRepo provides a mock function with given fields: repo
func (_m *RepositoryManager) InitRepo(repo *v1.ResticRepository) error {
	ret := _m.Called(repo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ResticRepository) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LockRepoExclusive provides a mock function with given fields: name
func (_m *RepositoryManager) LockRepoExclusive(name string) {
	_m.Called(name)
}

// LockRepoShared provides a mock function with given fields: name
func (_m *RepositoryManager) LockRepoShared(name string) {
	_m.Called(name)
}

// PruneRepo provides a mock function with given fields: repo
func (_m *RepositoryManager) PruneRepo(repo *v1.ResticRepository) error {
	ret := _m.Called(repo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ResticRepository) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PruneRepoQuick provides a mock function with given fields: repo
func (_m *RepositoryManager) PruneRepoQuick(repo *v1.ResticRepository) error {
	ret := _m.Called(repo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ResticRepository) error); ok {
		r0 = rf(repo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlockRepoExclusive provides a mock function with given fields: name
func (_m *RepositoryManager) UnlockRepoExclusive(name string) {
	_m.Called(name)
}

// UnlockRepoShared provides a mock function with given fields: name
func (_m *RepositoryManager) UnlockRepoShared(name string) {
	_m.Called(name)
}

// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	udmrepo "github.com/vmware-tanzu/velero/pkg/repository/udmrepo"
)

// BackupRepo is an autogenerated mock type for the BackupRepo type
type BackupRepo struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *BackupRepo) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteManifest provides a mock function with given fields: id
func (_m *BackupRepo) DeleteManifest(id udmrepo.ID) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(udmrepo.ID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindManifests provides a mock function with given fields: filter
func (_m *BackupRepo) FindManifests(filter udmrepo.ManifestFilter) ([]*udmrepo.ManifestEntryMetadata, error) {
	ret := _m.Called(filter)

	var r0 []*udmrepo.ManifestEntryMetadata
	if rf, ok := ret.Get(0).(func(udmrepo.ManifestFilter) []*udmrepo.ManifestEntryMetadata); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*udmrepo.ManifestEntryMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(udmrepo.ManifestFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Flush provides a mock function with given fields:
func (_m *BackupRepo) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetManifest provides a mock function with given fields: id, mani
func (_m *BackupRepo) GetManifest(id udmrepo.ID, mani *udmrepo.RepoManifest) error {
	ret := _m.Called(id, mani)

	var r0 error
	if rf, ok := ret.Get(0).(func(udmrepo.ID, *udmrepo.RepoManifest) error); ok {
		r0 = rf(id, mani)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewObjectWriter provides a mock function with given fields: opt
func (_m *BackupRepo) NewObjectWriter(opt udmrepo.ObjectWriteOptions) udmrepo.ObjectWriter {
	ret := _m.Called(opt)

	var r0 udmrepo.ObjectWriter
	if rf, ok := ret.Get(0).(func(udmrepo.ObjectWriteOptions) udmrepo.ObjectWriter); ok {
		r0 = rf(opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(udmrepo.ObjectWriter)
		}
	}

	return r0
}

// OpenObject provides a mock function with given fields: id
func (_m *BackupRepo) OpenObject(id udmrepo.ID) (udmrepo.ObjectReader, error) {
	ret := _m.Called(id)

	var r0 udmrepo.ObjectReader
	if rf, ok := ret.Get(0).(func(udmrepo.ID) udmrepo.ObjectReader); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(udmrepo.ObjectReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(udmrepo.ID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutManifest provides a mock function with given fields: mani
func (_m *BackupRepo) PutManifest(mani udmrepo.RepoManifest) (udmrepo.ID, error) {
	ret := _m.Called(mani)

	var r0 udmrepo.ID
	if rf, ok := ret.Get(0).(func(udmrepo.RepoManifest) udmrepo.ID); ok {
		r0 = rf(mani)
	} else {
		r0 = ret.Get(0).(udmrepo.ID)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(udmrepo.RepoManifest) error); ok {
		r1 = rf(mani)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Time provides a mock function with given fields:
func (_m *BackupRepo) Time() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// Code generated by mockery v2.10.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RepositoryProvider is an autogenerated mock type for the RepositoryProvider type
type RepositoryProvider struct {
	mock.Mock
}

// ConnectToRepo provides a mock function with given fields: repoID, bsl
func (_m *RepositoryProvider) ConnectToRepo(repoID string, bsl string) error {
	ret := _m.Called(repoID, bsl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoID, bsl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnsureUnlockRepo provides a mock function with given fields: repoID, bsl
func (_m *RepositoryProvider) EnsureUnlockRepo(repoID string, bsl string) error {
	ret := _m.Called(repoID, bsl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoID, bsl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Forget provides a mock function with given fields: repoID, snapshotID, backupLocation
func (_m *RepositoryProvider) Forget(repoID string, snapshotID string, backupLocation string) error {
	ret := _m.Called(repoID, snapshotID, backupLocation)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(repoID, snapshotID, backupLocation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitRepo provides a mock function with given fields: repoID, bsl
func (_m *RepositoryProvider) InitRepo(repoID string, bsl string) error {
	ret := _m.Called(repoID, bsl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoID, bsl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PruneRepo provides a mock function with given fields: repoID, bsl
func (_m *RepositoryProvider) PruneRepo(repoID string, bsl string) error {
	ret := _m.Called(repoID, bsl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoID, bsl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PruneRepoQuick provides a mock function with given fields: repoID, bsl
func (_m *RepositoryProvider) PruneRepoQuick(repoID string, bsl string) error {
	ret := _m.Called(repoID, bsl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(repoID, bsl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
